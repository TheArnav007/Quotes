{"version":3,"sources":["Quotes.jsx","App.js","serviceWorker.js","webpack:///./src/index.js?b635"],"names":["Quotes","useState","text","setText","author","setAuthor","isDarkMode","setIsDarkMode","className","class","onClick","axios","get","crossdomain","then","res","data","onChange","prevValue","document","body","classList","remove","add","checked","size","speed","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kNAuDeA,MApDf,WAAmB,IAAD,EACMC,mBAAS,sCADf,mBACXC,EADW,KACLC,EADK,OAEUF,mBAAS,IAFnB,mBAEXG,EAFW,KAEHC,EAFG,OAUkBJ,oBAAS,kBAAM,KAVjC,mBAUXK,EAVW,KAUCC,EAVD,KA0BlB,OACE,6BACA,yBAAKC,UAAU,aACX,wBAAIA,UAAWF,EAAa,YAAc,cAA1C,mBAEJ,yBAAKE,UAAU,WACf,yBAAKA,UAAU,aACX,4BAAK,IAAKN,EAAM,KAChB,4BAAK,IAAME,IAEf,4BAAQK,MAAM,yBAAyBC,QAhCzC,WACGC,IAAMC,IAAI,4CAA8C,CAAEC,aAAa,IAAQC,MAAM,SAASC,GAC5FZ,EAAQY,EAAIC,KAAKd,MACjBG,EAAUU,EAAIC,KAAKZ,aA6BtB,mBAGA,yBAAKI,UAAU,WACf,kBAAC,IAAD,CACIS,SA7BN,WAGEV,GAAc,SAAAW,GAAc,OAAQA,KACpCC,SAASC,KAAKC,UAAUC,OAClBhB,EAJc,YACC,cAKtBa,SAASC,KAAKC,UAAUE,IACvBjB,EANqB,aADD,cA6BhBkB,QAASlB,EACTmB,KAAM,GACNC,MAAO,QCjCEC,MAVf,WACE,OACE,yBAAKnB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCIYoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhB,SAASiB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8d9c54a8.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport axios from \"axios\";\r\nimport DarkModeToggle from \"react-dark-mode-toggle\";\r\nfunction Quotes() {\r\nconst [text, setText] = useState(\"Press the below Button to Generate\");\r\nconst [author, setAuthor] = useState(\"\");\r\n\r\nfunction getQuotes(){\r\n   axios.get(\"https://get-quotes-backend.herokuapp.com/\",  { crossdomain: true }).then (function(res){\r\n     setText(res.data.text);\r\n     setAuthor(res.data.author);\r\n   })\r\n}\r\nconst [isDarkMode, setIsDarkMode] = useState(() => true);\r\n\r\nfunction handleChange (){\r\n  var classNameDark = 'dark-mode';\r\n  var classNameLight = 'light-mode';\r\n  setIsDarkMode(prevValue => {return !prevValue});\r\n  document.body.classList.remove(\r\n        isDarkMode ? classNameDark : classNameLight\r\n    );\r\n document.body.classList.add(\r\n  isDarkMode ? classNameLight : classNameDark\r\n);\r\n}\r\n\r\n\r\n\r\nreturn (\r\n  <div>\r\n  <div className=\"headertxt\">\r\n      <h1 className={isDarkMode ? 'dark-mode' : 'light-mode'}> Random Quotes</h1>\r\n  </div>\r\n  <div className=\"maindiv\">\r\n  <div className=\"quotesdiv\">\r\n      <h1>{'\"'+ text +'\"'}</h1>\r\n      <h6>{\"-\" + author}</h6>\r\n  </div>\r\n  <button class=\"btn btn-info btn-large\" onClick={getQuotes}>\r\n    Generate Quotes\r\n  </button>\r\n  <div className=\"darkdiv\">\r\n  <DarkModeToggle\r\n      onChange={handleChange}\r\n      checked={isDarkMode}\r\n      size={50}\r\n      speed={4}\r\n    />\r\n  </div>\r\n  </div>\r\n  </div>\r\n\r\n  )\r\n}\r\nexport default Quotes;\r\n","import React from 'react';\nimport './App.css';\nimport Quotes from \"./Quotes\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Quotes/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}